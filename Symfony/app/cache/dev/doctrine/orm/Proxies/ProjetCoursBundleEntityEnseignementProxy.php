<?php

namespace Proxies;

/**
 * THIS CLASS WAS GENERATED BY THE DOCTRINE ORM. DO NOT EDIT THIS FILE.
 */
class ProjetCoursBundleEntityEnseignementProxy extends \Projet\CoursBundle\Entity\Enseignement implements \Doctrine\ORM\Proxy\Proxy
{
    private $_entityPersister;
    private $_identifier;
    public $__isInitialized__ = false;
    public function __construct($entityPersister, $identifier)
    {
        $this->_entityPersister = $entityPersister;
        $this->_identifier = $identifier;
    }
    /** @private */
    public function __load()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;

            if (method_exists($this, "__wakeup")) {
                // call this after __isInitialized__to avoid infinite recursion
                // but before loading to emulate what ClassMetadata::newInstance()
                // provides.
                $this->__wakeup();
            }

            if ($this->_entityPersister->load($this->_identifier, $this) === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            unset($this->_entityPersister, $this->_identifier);
        }
    }
    
    
    public function getSujets()
    {
        $this->__load();
        return parent::getSujets();
    }

    public function addSujet(\Projet\ForumBundle\Entity\Sujet $sujet)
    {
        $this->__load();
        return parent::addSujet($sujet);
    }

    public function getCriteres()
    {
        $this->__load();
        return parent::getCriteres();
    }

    public function addCritere(\Projet\CoursBundle\Entity\Critere $critere)
    {
        $this->__load();
        return parent::addCritere($critere);
    }

    public function getDocuments()
    {
        $this->__load();
        return parent::getDocuments();
    }

    public function addDocument(\Projet\CoursBundle\Entity\Document $document)
    {
        $this->__load();
        return parent::addDocument($document);
    }

    public function getDevoirs()
    {
        $this->__load();
        return parent::getDevoirs();
    }

    public function addDevoir(\Projet\CoursBundle\Entity\Devoir $devoir)
    {
        $this->__load();
        return parent::addDevoir($devoir);
    }

    public function __toString()
    {
        $this->__load();
        return parent::__toString();
    }

    public function getId()
    {
        $this->__load();
        return parent::getId();
    }

    public function setNom($nom)
    {
        $this->__load();
        return parent::setNom($nom);
    }

    public function getNom()
    {
        $this->__load();
        return parent::getNom();
    }

    public function setDescription($description)
    {
        $this->__load();
        return parent::setDescription($description);
    }

    public function getDescription()
    {
        $this->__load();
        return parent::getDescription();
    }

    public function setVisibilite($visibilite)
    {
        $this->__load();
        return parent::setVisibilite($visibilite);
    }

    public function getVisibilite()
    {
        $this->__load();
        return parent::getVisibilite();
    }

    public function setActif($actif)
    {
        $this->__load();
        return parent::setActif($actif);
    }

    public function getActif()
    {
        $this->__load();
        return parent::getActif();
    }

    public function setCreatedAt($createdAt)
    {
        $this->__load();
        return parent::setCreatedAt($createdAt);
    }

    public function getCreatedAt()
    {
        $this->__load();
        return parent::getCreatedAt();
    }


    public function __sleep()
    {
        return array('__isInitialized__', 'sujets', 'criteres', 'documents', 'devoirs', 'id', 'nom', 'description', 'visibilite', 'actif', 'created_at');
    }

    public function __clone()
    {
        if (!$this->__isInitialized__ && $this->_entityPersister) {
            $this->__isInitialized__ = true;
            $class = $this->_entityPersister->getClassMetadata();
            $original = $this->_entityPersister->load($this->_identifier);
            if ($original === null) {
                throw new \Doctrine\ORM\EntityNotFoundException();
            }
            foreach ($class->reflFields AS $field => $reflProperty) {
                $reflProperty->setValue($this, $reflProperty->getValue($original));
            }
            unset($this->_entityPersister, $this->_identifier);
        }
        
    }
}